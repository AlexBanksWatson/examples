
MAIN MODEL Main_NetworkDesign

  DECLARATION SECTION 

    SET:
       identifier   :  Cities
       indices      :  i, j ;

    SET:
       identifier   :  Commodities
       index        :  q ;

    SET:
       identifier   :  Links
       index        :  l ;

    PARAMETER:
       identifier   :  ModuleCost
       index domain :  (i,j) ;

    PARAMETER:
       identifier   :  ModuleCapacity
       index domain :  (i,j) ;

    PARAMETER:
       identifier   :  Demand
       index domain :  q ;

    ELEMENT PARAMETER:
       identifier   :  FromCity
       index domain :  q
       range        :  Cities ;

    ELEMENT PARAMETER:
       identifier   :  ToCity
       index domain :  q
       range        :  Cities ;

    VARIABLE:
       identifier   :  Flow
       index domain :  (i,j,q)
       range        :  nonnegative ;

    VARIABLE:
       identifier   :  NumberOfModules
       index domain :  (i,j)
       range        :  integer ;

    VARIABLE:
       identifier   :  TotalCost
       range        :  free
       definition   :  sum((i,j), NumberOfModules(i, j) * ModuleCost(i, j)) ;

    CONSTRAINT:
       identifier   :  CapacityConstraint
       index domain :  (i,j)
       definition   :  sum(q, Flow(i, j, q) + Flow(j, i, q)) <= ModuleCapacity(i, j) * NumberOfModules(i, j) ;

    CONSTRAINT:
       identifier   :  DemandConstraint
       index domain :  (i,q)
       definition   :  if (i = FromCity(q)) then
                       sum(j, Flow(j, i, q)) - sum(j, Flow(i, j, q)) = - Demand(q)
                       elseif(i = ToCity(q)) then
                       sum(j, Flow(j, i, q)) - sum(j, Flow(i, j, q)) = Demand(q)
                       else
                       sum(j, Flow(j, i, q)) - sum(j, Flow(i, j, q)) = 0
                       endif ;

  ENDSECTION  ;

  PROCEDURE
    identifier :  MainInitialization

  ENDPROCEDURE  ;

  PROCEDURE
    identifier :  MainExecution
    body       :
      ReadXML( "NetworkDesign.xml", "NetworkDesign.axm" );
      
      display Cities, ModuleCost, ModuleCapacity, Demand, FromCity, ToCity;

  ENDPROCEDURE  ;

  PROCEDURE
    identifier :  MainTermination
    body       :  
      return 1;

  ENDPROCEDURE  ;

ENDMODEL Main_NetworkDesign ;
