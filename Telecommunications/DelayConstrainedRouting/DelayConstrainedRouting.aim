
MAIN MODEL Delay_Constrained_Routing
  comment :  "Delay constrained routing
              
              Problem type:
              Convex MINLP (small)
              
              Keywords:
              Outer Approximation, GMP-AOA, lazy constraints callback
              
              Description:
              The Delay-Constrained Routing Problem is a problem in telecommunications.
              Services are routed through a network, from source to destination, such
              that the delay of each service satisfies a certain guarantee. The objective
              is to minimize the total routing cost. This problem is solved using the
              AIMMS Outer Approximation (AOA) algorithm.
              
              References:
              Hijazi, H., P. Bonami, G. Cornuéjols, A. Ouorou, Mixed-integer nonlinear
              programs featuring \"on/off\" constraints, Computational Optimization and
              Applications 52 (2), 2012, pp. 537-558."

  DECLARATION SECTION 

    PARAMETER:
       identifier   :  NumberOfArcs
       range        :  integer
       definition   :  331 ;

    PARAMETER:
       identifier   :  NumberOfCommodities
       range        :  integer
       definition   :  200 ;

    PARAMETER:
       identifier   :  NumberOfPaths
       range        :  integer
       definition   :  2 ;

    SET:
       identifier   :  Arcs
       subset of    :  Integers
       index        :  e
       definition   :  { 1 .. NumberOfArcs } ;

    SET:
       identifier   :  Commodities
       subset of    :  Integers
       index        :  k
       definition   :  { 1 .. NumberOfCommodities } ;

    SET:
       identifier   :  Paths
       subset of    :  Integers
       text         :  "Candidate paths"
       index        :  i
       definition   :  { 1 .. NumberOfPaths } ;

    PARAMETER:
       identifier   :  PathLimitPerDemand
       range        :  integer
       definition   :  1
       comment      :  "The maximum authorized number of activated paths per demand." ;

    SET:
       identifier   :  Routes
       index domain :  (k,i)
       subset of    :  Arcs ;

    PARAMETER:
       identifier   :  ArcCost
       index domain :  e ;

    PARAMETER:
       identifier   :  ArcCapacity
       index domain :  e ;

    PARAMETER:
       identifier   :  FlowUpperBound
       index domain :  e ;

    PARAMETER:
       identifier   :  Demand
       index domain :  k ;

    PARAMETER:
       identifier   :  Delay
       index domain :  k ;

    PARAMETER:
       identifier   :  NumberOfCandidatePaths
       index domain :  k
       range        :  integer ;

    VARIABLE:
       identifier   :  Flow
       index domain :  e
       range        :  nonnegative ;

    VARIABLE:
       identifier   :  DemandFraction
       index domain :  (k,i) | i <= NumberOfCandidatePaths(k)
       range        :  [0, 1] ;

    VARIABLE:
       identifier   :  SelectedPath
       index domain :  (k,i)
       range        :  binary
       comment      :  "1, if path (i,k) is activated" ;

    VARIABLE:
       identifier   :  TotalRoutingCost
       definition   :  sum( e, ArcCost(e)*Flow(e) ) ;

    CONSTRAINT:
       identifier   :  DemandSatisfaction
       index domain :  k
       definition   :  sum( i, DemandFraction(k,i) ) >= 1
       comment      :  "The fraction of routed demand must be greater than 1 to guarantee the satisfaction of all demands." ;

    CONSTRAINT:
       identifier   :  FlowDefinition
       index domain :  e
       definition   :  sum( (k,i) | e in Routes(k,i), Demand(k) * DemandFraction(k,i) ) <= Flow(e)
       comment      :  "Flow(e) is defined as the sum of all flows passing through arc e." ;

    CONSTRAINT:
       identifier   :  CapacityConstraint
       index domain :  e
       definition   :  Flow(e) <= ArcCapacity(e)
       comment      :  "The flow is bounded by the capacity installed on the link." ;

    CONSTRAINT:
       identifier   :  DelayConstraint
       index domain :  (k,i)
       definition   :  sum( e | e in Routes(k,i), (SelectedPath(k,i)^2/(SelectedPath(k,i) * ArcCapacity(e) - Flow(e) + (1-SelectedPath(k,i)) * (FlowUpperbound(e) + 0.0001))) )
                       <=
                       SelectedPath(k,i) * Delay(k)
       comment      :  "Convex formulation of \"on/off\" delay constraints. Constraint (9-c) in Hijazi et al. (2012)." ;

    CONSTRAINT:
       identifier   :  PathsLimitConstraint
       index domain :  k
       definition   :  sum( i, SelectedPath(k,i) ) <= PathLimitPerDemand
       comment      :  "Fix the maximum number of active paths per commodity." ;

    CONSTRAINT:
       identifier   :  PathIndicatorConstraint
       index domain :  (k,i)
       definition   :  DemandFraction(k,i) <= SelectedPath(k,i) ;

    MATHEMATICAL PROGRAM:
       identifier   :  DCRP
       objective    :  TotalRoutingCost
       direction    :  minimize
       type         :  MINLP ;

    ELEMENT PARAMETER:
       identifier   :  myGMP
       range        :  AllGeneratedMathematicalPrograms ;

  ENDSECTION  ;

  PROCEDURE
    identifier :  MainInitialization
    body       :  
      read from file "data.inp";

  ENDPROCEDURE  ;

  PROCEDURE
    identifier :  OuterApproximation
    comment    :  "Solve problem using classic Outer Approximation algorithm."
    body       :  
      put GMPOuterApprox::outf;
      
      myGMP := GMP::Instance::Generate( DCRP ) ;
      
      GMPOuterApprox::CreateStatusFile := 1;
      
      ! Mark model as convex. For nonconvex problems parameter 'IsConvex' should be set to 0.
      GMPOuterApprox::IsConvex := 1;
      
      GMPOuterApprox::DoOuterApproximation( myGMP );
      
      putclose;

  ENDPROCEDURE  ;

  PROCEDURE
    identifier :  ConvexOuterApproximation
    comment    :  "Solve problem using modern Outer Approximation algorithm that uses the Lazy Constraints callback
                   of CPLEX or GUROBI. The modern algorithm solves only one MIP problem."
    body       :  
      put GMPOuterApprox::outf;
      
      myGMP := GMP::Instance::Generate( DCRP ) ;
      
      GMPOuterApprox::CreateStatusFile := 1;
      
      GMPOuterApprox::DoConvexOuterApproximation( myGMP );
      
      putclose;

  ENDPROCEDURE  ;

  PROCEDURE
    identifier :  MainTermination
    body       :  
      return 1;

  ENDPROCEDURE  ;

  MODULE GMP_Outer_Approximation_Module
      source file :  "%AIMMSMODULES%\\GMPOuterApproximation.aim"
    comment     :  "This module contains two outer approximation algorithms for solving Mixed Integer
                    Nonlinear Problems (MINLP). The basic algorithm can be found in the section 'AOA
                    Basic Algorithm' and is based on the following two papers:
                    
                     M.A. Duran and I.E. Grossmann, An outer-approximation algorithm for a class of
                     mixed-integer nonlinear programs, Mathematical Programming 36 (1986), pp. 307-339.
                    
                     J. Viswanathan and I.E. Grossmann, A combined penalty function and outer-approximation
                     method for MINLP optimization, Computers and Chemical Engineering 14 (1990), pp. 769-778.
                    
                    The basic algorithm can be used for convex and non-convex problems with general integer
                    variables.
                    
                    The section 'AOA Convex Algorithm' contains a variant of the outer approximation algorithm
                    that uses a single tree search. In this way the sequential solving of several MIP's is
                    avoided. The algorithm is based on the paper:
                    
                     I. Quesada and I.E. Grossmann, An LP/NLP Based Branch and Bound Algorithm for Convex MINLP
                     Optimization Problems, Computers and Chemical Engineering 16 (1992), pp. 937-947.
                    
                    This algorithm can only be used for convex problems (with general integer variables)."


  ENDMODULE GMP_Outer_Approximation_Module ;

ENDMODEL Delay_Constrained_Routing ;
