
MAIN MODEL BATCH_PROCESSING_PROBLEM_WITH_INTERMEDIATE_STORAGE_TANKS

  DECLARATION SECTION Declaration_1
    comment    :  "10 products/10 stages/6 potential tanks
                   TITLE BATCH PROCESSING PROBLEM WITH INTERMEDIATE STORAGE TANKS
                   OFFSYMXREF
                   OFFSYMLIST
                   !  MINLP FORMULATION OF BATCH PROCESSING PROBLEM"


    SET:
       identifier   :  I
       text         :  "PRODUCTS"
       index        :  I_i
       initial data :  data { A, B, C, D, E, F, G, H, HH, HHH } ;

    SET:
       identifier   :  J
       text         :  "POTENTIAL STAGES"
       indices      :  J_i, KK
       initial data :  data { 1 .. 10 } ;

    SET:
       identifier   :  M
       text         :  "POTENTIAL STORAGE TANKS"
       initial data :  data { 1 .. 6 } ;

    SET:
       identifier   :  K
       text         :  "BINARIES NEEDED TO REPRESENT N(J)"
       index        :  K_i
       parameters   :  _1_, _2_, _3_, _4_, _5_
       initial data :  data { 1 .. 6 } ;

    ELEMENT PARAMETER:
       identifier   :  _6_
       range        :  K ;

    SET:
       identifier   :  D
       initial data :  data { 1 .. 2 } ;

    PARAMETER:
       identifier   :  H
       text         :  "HORIZON TIME (available time hrs)"
       initial data :  6000. ;

    PARAMETER:
       identifier   :  ALPHA
       text         :  "COST COEFFICIENT FOR BATCH UNITS"
       initial data :  250. ;

    PARAMETER:
       identifier   :  COSST
       text         :  "COST COEFF. FOR STORAGE TANK"
       initial data :  150. ;

    PARAMETER:
       identifier   :  Gamma
       text         :  "COST COEFF. FOR STORAGE TANK"
       initial data :  0.5 ;

    PARAMETER:
       identifier   :  Q
       index domain :  I_i
       text         :  "PRODUCTION RATE OF PRODUCT i"
       initial data :  data
                           { A   : 250000,  B   : 150000,  C   : 180000,  D   : 160000,  E   : 120000,  F   : 130000,  G   : 190000,  H   : 140000,
                             HH  : 175000,  HHH : 125000 } ;

    PARAMETER:
       identifier   :  PHI ;

    PARAMETER:
       identifier   :  ACTTL
       index domain :  (I_i,J_i) ;

    PARAMETER:
       identifier   :  ACTV
       index domain :  J_i
       text         :  "ACTUAL VOLUME" ;

    PARAMETER:
       identifier   :  ACTB
       index domain :  (I_i,J_i)
       text         :  "ACTUAL BATCH SIZES" ;

    PARAMETER:
       identifier   :  ACTN
       index domain :  J_i
       text         :  "ACTUAL NUMBER OF UNITS IN PARALLEL  (in phase)" ;

    PARAMETER:
       identifier   :  COEFF
       index domain :  K_i ;

  ENDSECTION  ;

  DECLARATION SECTION Declaration_2

    PARAMETER:
       identifier   :  S
       index domain :  (I_i,J_i)
       text         :  "SIZE FACTOR FOR PRODUCT i IN STAGE j"
       initial data :  data table
                                1      2      3      4      5      6      7      8      9     10
                         !  -----  -----  -----  -----  -----  -----  -----  -----  -----  -----
                         A  2.900  2.000  5.200  4.900  6.100  4.200  5.000  1.100  3.200  4.500
                         B  0.800  0.800  0.900  3.400  2.100  2.500  0.900  2.200  1.400  2.200
                         C  0.700  2.600  1.600  3.600  3.200  2.900  3.600  4.000  4.300  0.600
                         D  4.700  2.300  1.600  2.700  1.200  2.500  3.900  0.600  3.100  5.800
                         E  1.200  3.600  2.400  4.500  1.600  2.100  0.900  4.200  2.100  4.100
                         F  3.100  2.500  4.500  1.300  3.300  4.100  1.400  1.000  3.500  0.700
                         G  1.000  2.200  0.700  4.200  2.800  2.300  5.200  1.900  2.600  1.100
                         H  2.500  1.100  5.300  2.600  3.700  4.000  2.200  3.300  2.700  3.400
                        HH  2.400  2.500  2.700  3.200  2.300  1.700  5.200  4.700  2.600  1.400
                       HHH  2.700  3.300  4.400  2.600  3.700  0.500  2.700  6.200  3.200  3.400 ;

    PARAMETER:
       identifier   :  T
       index domain :  (I_i,J_i)
       text         :  "PROCESSING TIME OF PRODUCT I IN BATCH J"
       initial data :  data table
                                1      2      3      4      5      6      7      8      9     10
                         !  -----  -----  -----  -----  -----  -----  -----  -----  -----  -----
                         A  6.400  4.700  1.300  3.900  2.100  1.600  3.200  3.100  4.200  5.200
                         B  3.800  6.400  6.500  4.400  2.300  3.200  5.200  2.500  4.400  1.100
                         C  1.000  6.300  3.400  4.900  2.700  6.200  3.100  1.200  2.300  5.100
                         D  3.200  3.000  3.500  3.300  2.800  3.400  4.200  2.900  6.200  2.200
                         E  2.100  2.500  4.200  3.600  3.700  2.200  5.100  0.400  4.100  1.300
                         F  3.500  4.100  0.900  1.400  3.600  2.700  2.900  3.700  0.800  1.500
                         G  4.100  6.700  2.200  1.400  0.700  4.700  1.300  0.600  3.200  2.100
                         H  5.300  3.100  2.800  1.500  3.200  6.100  0.500  3.900  2.700  4.100
                        HH  2.600  5.200  3.200  3.400  4.400  1.100  7.100  2.500  3.100  0.900
                       HHH  1.700  5.200  3.700  2.600  5.200  2.600  5.100  8.200  1.100  2.900 ;

    VARIABLE:
       identifier   :  V
       index domain :  J_i
       text         :  "VOLUME OF STAGE J"
       range        :  nonnegative
       property     :  ReducedCost ;

    VARIABLE:
       identifier   :  BAT
       index domain :  I_i
       text         :  "BATCH SIZE of PRODUCT i"
       range        :  nonnegative
       property     :  ReducedCost ;

    VARIABLE:
       identifier   :  B
       index domain :  (I_i,J_i)
       text         :  "BATCH SIZE OF PRODUCT i STAGE(j)"
       range        :  nonnegative
       property     :  ReducedCost ;

    VARIABLE:
       identifier   :  TL
       index domain :  (I_i,J_i)
       text         :  "CYCLE TIME OF PRODUCT i"
       range        :  nonnegative
       property     :  ReducedCost ;

    VARIABLE:
       identifier   :  N
       index domain :  J_i
       text         :  "NUMBER OF UNITS IN PARALLEL STAGE j"
       range        :  nonnegative
       property     :  ReducedCost ;

    VARIABLE:
       identifier   :  MI
       index domain :  J_i
       range        :  nonnegative
       property     :  ReducedCost ;

    VARIABLE:
       identifier   :  COST_
       text         :  "TOTAL COST OF BATCH PROCESSING UNITS"
       property     :  ReducedCost ;

    VARIABLE:
       identifier   :  VST
       index domain :  J_i
       text         :  "VOLUME OF STORAGE TANK BETEWN STAGE J AND J+1"
       range        :  nonnegative
       property     :  ReducedCost ;

    VARIABLE:
       identifier   :  E
       index domain :  I_i
       property     :  ReducedCost ;

    VARIABLE:
       identifier   :  Y1
       index domain :  (K_i,J_i)
       range        :  binary
       property     :  ReducedCost ;

    VARIABLE:
       identifier   :  Y2
       index domain :  (K_i,J_i)
       range        :  binary
       property     :  ReducedCost ;

    VARIABLE:
       identifier   :  Y3
       index domain :  J_i
       range        :  binary
       property     :  ReducedCost ;

    CONSTRAINT:
       identifier   :  VOL
       index domain :  (I_i,J_i)
       text         :  "CALCULATE VOLUME OF STAGE j"
       property     :  ShadowPrice
       definition   :  V(J_i) >=  LOG(S(I_i,J_i)) + B(I_i,J_i)  - N(J_i) ;

    CONSTRAINT:
       identifier   :  TI
       index domain :  (I_i,J_i)
       property     :  ShadowPrice
       definition   :  E(I_i) >=  LOG(T(I_i,J_i))- B(I_i,J_i)- MI(J_i)
       comment      :  "CYCLE(I,J)..   MI(J) + TL(I,J)  =G=  LOG(T(I,J))                      ;" ;

    CONSTRAINT:
       identifier   :  TIME
       text         :  "TIME CONSTRAINT"
       property     :  ShadowPrice
       definition   :  SUM(I_i, Q(I_i) * EXP(E(I_i))) <=  H ;

    CONSTRAINT:
       identifier   :  VOLUM1
       index domain :  (I_i,J_i) | (ORD(J_i) <  CARD(J_i))
       text         :  "STORAGE TANK SIZE EQUATION for PRODUCT I STAGE J"
       property     :  ShadowPrice
       definition   :  VST(J_i) >= LOG(2*5)+B(I_i,J_i+1)-(LOG(BUPP(I_i))-LOG(100)+LOG(10))*(1-Y3(J_i)) ;

    CONSTRAINT:
       identifier   :  VOLUM2
       index domain :  (I_i,J_i) | (ORD(J_i) <  CARD(J_i))
       text         :  "STORAGE TANK SIZE EQUATION for PRODUCT I STAGE J"
       property     :  ShadowPrice
       definition   :  VST(J_i) >= LOG(2*5)+B(I_i,J_i)-(LOG(BUPP(I_i))-LOG(100)+LOG(10))*(1-Y3(J_i)) ;

    CONSTRAINT:
       identifier   :  UNIT1_1
       index domain :  (J_i,K_i)
       property     :  ShadowPrice
       definition   :  N(J_i)  <=        COEFF(K_i) + M1(K_i)*(1-Y1(K_i,J_i)) ;

    CONSTRAINT:
       identifier   :  UNIT1_2
       index domain :  (J_i,K_i)
       property     :  ShadowPrice
       definition   :  N(J_i)  >=        COEFF(K_i) - M2(K_i)*(1-Y1(K_i,J_i)) ;

    CONSTRAINT:
       identifier   :  UNIT2_1
       index domain :  (J_i,K_i)
       property     :  ShadowPrice
       definition   :  MI(J_i)  <=       COEFF(K_i) + M1(K_i)*(1-Y2(K_i,J_i)) ;

    CONSTRAINT:
       identifier   :  UNIT2_2
       index domain :  (J_i,K_i)
       property     :  ShadowPrice
       definition   :  MI(J_i)  >=       COEFF(K_i) - M2(K_i)*(1-Y2(K_i,J_i)) ;

    CONSTRAINT:
       identifier   :  LIM1
       index domain :  J_i
       text         :  "LIMIT SELECTION TO ONE NUMBER for N(J)"
       property     :  ShadowPrice
       definition   :  SUM(K_i, Y1(K_i,J_i)) =   1 ;

    CONSTRAINT:
       identifier   :  LIM2
       index domain :  J_i
       property     :  ShadowPrice
       definition   :  SUM(K_i, Y2(K_i,J_i)) =   1 ;

    CONSTRAINT:
       identifier   :  BTSZE1
       index domain :  (I_i,J_i) | (ORD(J_i) <  CARD(J_i))
       text         :  "BATCH SIZE EQUAT. PRODUCT I stage J"
       property     :  ShadowPrice
       definition   :  B(I_i,J_i) - B(I_i,J_i+1) <=  LOG(3.)+ (LOG(BUPP(I_i))-LOG(BLOW(I_i))-LOG(3))*(1-Y3(J_i)) ;

    CONSTRAINT:
       identifier   :  BTSZE2
       index domain :  (I_i,J_i) | (ORD(J_i) <  CARD(J_i))
       text         :  "BATCH SIZE EQUAT. PRODUCT i stage J"
       property     :  ShadowPrice
       definition   :  B(I_i,J_i) - B(I_i,J_i+1) >=  -LOG(3.)- (LOG(BUPP(I_i))-LOG(BLOW(I_i))-LOG(3))*(1-Y3(J_i)) ;

    CONSTRAINT:
       identifier   :  OBJ
       text         :  "OBJECTIVE FUNCTION DEFINITION"
       property     :  ShadowPrice
       definition   :  COST_  =    ALPHA * SUM(J_i,EXP(N(J_i) + MI(J_i) + 0.6*V(J_i))) +
                                  150.  * SUM(J_i$(ORD(J_i) <  CARD(J_i)),EXP(0.5 * VST(J_i)))
       comment      :  "***********************************************************************************" ;

    CONSTRAINT:
       identifier   :  VOLUM1_2
       index domain :  J_i | (ORD(J_i) <  CARD(J_i))
       property     :  ShadowPrice
       definition   :  VST(J_i) <=  -LOG(10000)+(LOG(15000)+LOG(10000))*Y3(J_i) ;

    CONSTRAINT:
       identifier   :  VOLUM2_2
       index domain :  J_i | (ORD(J_i) <  CARD(J_i))
       property     :  ShadowPrice
       definition   :  VST(J_i) >=  -LOG(10000)-(LOG(100)+LOG(10000))*Y3(J_i) ;

    CONSTRAINT:
       identifier   :  BTSZE1_2
       index domain :  (I_i,J_i) | (ORD(J_i) <  CARD(J_i))
       property     :  ShadowPrice
       definition   :  B(I_i,J_i) - B(I_i,J_i+1) <=  (LOG(BUPP(I_i))-LOG(BLOW(I_i)))*Y3(J_i) ;

    CONSTRAINT:
       identifier   :  BTSZE2_2
       index domain :  (I_i,J_i) | (ORD(J_i) <  CARD(J_i))
       property     :  ShadowPrice
       definition   :  B(I_i,J_i) - B(I_i,J_i+1) >=  - (LOG(BUPP(I_i))-LOG(BLOW(I_i)))*Y3(J_i) ;

  ENDSECTION  ;

  DECLARATION SECTION Declaration_3
    comment    :  "COST.lo = 0.0      ;"


  ENDSECTION  ;

  DECLARATION SECTION Declaration_4

    PARAMETER:
       identifier   :  TLLOW
       index domain :  I_i
       text         :  "LOWER BOUND ON TL(I)" ;

    PARAMETER:
       identifier   :  TLUPP
       index domain :  I_i
       text         :  "UPPER BOUND ON TL(I)" ;

  ENDSECTION  ;

  DECLARATION SECTION Declaration_5

    PARAMETER:
       identifier   :  BLOW
       index domain :  I_i
       text         :  "LOWER BOUND ON B" ;

    PARAMETER:
       identifier   :  BUPP
       index domain :  I_i
       text         :  "UPPER BOUND ON B" ;

  ENDSECTION  ;

  DECLARATION SECTION Declaration_6

    PARAMETER:
       identifier   :  M1
       index domain :  K_i
       initial data :  data { } ;

    PARAMETER:
       identifier   :  M2
       index domain :  K_i
       initial data :  data { } ;

  ENDSECTION  ;

  DECLARATION SECTION Declaration_7

    MATHEMATICAL PROGRAM:
       identifier :  BATCH_BM
       objective  :  COST_
       direction  :  minimize
       type       :  MINLP ;

    ELEMENT PARAMETER:
       identifier :  gmp1
       range      :  AllGeneratedMathematicalPrograms ;

  ENDSECTION  ;

  PROCEDURE
    identifier :  MainInitialization
    body       :  
      _1_          := '1' ;
      _2_          := '2' ;
      _3_          := '3' ;
      _4_          := '4' ;
      _5_          := '5' ;
      _6_          := '6' ;
      
      COEFF(_1_) :=LOG(1.)  ;
      COEFF(_2_) :=LOG(2.)  ;
      COEFF(_3_) :=LOG(3.)  ;
      COEFF(_4_) :=LOG(4.)  ;
      COEFF(_5_) :=LOG(5.)  ;
      COEFF(_6_) :=LOG(6.)  ;
      
      ! BOUNDS SECTION
      V.LO(J_i)   := LOG(300.) ;
      V.UP(J_i)   := LOG(3500.);
      VST.LO(J_i) := LOG(100.) ;
      VST.UP(J_i) :=LOG(15000.);
      N.UP(J_i)   := LOG(6.)   ;
      MI.UP(J_i)  := LOG(6.)   ;
      
      TLLOW(I_i)  := smax(J_i, T(I_i,J_i) / EXP(N.UP(J_i))) ;
      TLUPP(I_i)  := smax(J_i, T(I_i,J_i) ) ;
      TL.LO(I_i,J_i)  := LOG(TLLOW(I_i)) ;
      TL.UP(I_i,J_i)  := LOG(TLUPP(I_i)) ;
      
      BLOW(I_i)  := Q(I_i) * ( smax(J_i, T(I_i,J_i) / EXP(N.UP(J_i))))/ H;
      BUPP(I_i)  := MIN( Q(I_i) , smin(J_i, EXP(V.UP(J_i))/S(I_i,J_i))) ;
      B.LO(I_i,J_i)   := LOG(BLOW(I_i)) ;
      B.UP(I_i,J_i)   := LOG(BUPP(I_i)) ;
      
      M1(K_i) :=LOG(6) - COEFF(K_i);
      M2(K_i) :=COEFF(K_i) - LOG(1) ;

  ENDPROCEDURE  ;
 
  PROCEDURE
    identifier :  MainExecution
    body       :  
      put GMPOuterApprox::outf;
      
      gmp1 := GMP::Instance::Generate( BATCH_BM ) ;
      
      GMPOuterApprox::CreateStatusFile := 1;
      
      GMPOuterApprox::DoConvexOuterApproximation( gmp1 );
      
      putclose;

  ENDPROCEDURE  ;
  
  PROCEDURE
    identifier :  NormalAOASolve
    body       :  
      put GMPOuterApprox::outf;
      
      gmp1 := GMP::Instance::Generate( BATCH_BM ) ;
      
      GMPOuterApprox::IterationMax := 10;
      GMPOuterApprox::CreateStatusFile := 1;
      GMPOuterApprox::IsConvex := 1;
      
      GMPOuterApprox::DoOuterApproximation( gmp1 );
      
      putclose;

  ENDPROCEDURE  ;

  MODULE Outer_Approximation_Module
      source file :  "%AIMMSMODULES%\\GMPOuterApproximation.amb"


  ENDMODULE Outer_Approximation_Module ;
  
SECTION Section_BB
      source file :  "BB.aim"


  ENDSECTION Section_BB ;
ENDMODEL BATCH_PROCESSING_PROBLEM_WITH_INTERMEDIATE_STORAGE_TANKS ;
