
MAIN MODEL Water_Distribution
  comment :  "Optimal Design of a Water Distribution Network
              
              Problem type:
              MINLP (small)
              
              Description:
              The optimal design of a Water Distribution Network consists of the choice of
              a diameter for each pipe, while other design properties are considered to be
              fixed (e.g., the topology and pipe lengths).
              
              The Water Distribution Network is formulated as MINLP problem and solved using
              a generic Branch-and-Bound algorithm that was created using GMP functionality.
              The algorithm is available in the file 'BB.aim' and can be included in any
              AIMMS project as a Section.
              
              References:
              Bragalli, C., C. D'Ambrosio, J. Lee, A. Lodi and P. Toth, On the optimal design
              of water distribution networks: a practical MINLP approach, Optimization and
              Engineering 13(2), 2012, pp. 219-246.
              
              CMU-IBM Cyber-Infrastructure for MINLP collaborative site, at:
              http://www.minlp.org/index.php
              
              Nemhauser, G.L. and L.A. Wolsey, Integer and Combinatorial Optimization, Wiley,
              1999."

  DECLARATION SECTION 

    SET:
       identifier   :  Nodes
       text         :  "Set of Nodes, i.e., junctions"
       indices      :  i, j
       initial data :  data { 1 .. 7 } ;

    SET:
       identifier   :  SourceNodes
       subset of    :  Nodes
       text         :  "Set of source nodes"
       initial data :  data { 1 } ;

    PARAMETER:
       identifier   :  Pipes
       index domain :  (i,j)
       range        :  binary
       definition   :  data { ( 1, 2 ) : 1,  ( 2, 3 ) : 1,  ( 2, 4 ) : 1,  ( 3, 5 ) : 1,  ( 4, 5 ) : 1,  ( 4, 6 ) : 1,  ( 5, 7 ) : 1,  ( 6, 7 ) : 1 } ;

    SET:
       identifier   :  Diameters
       text         :  "Index set for the discrete diameters/costs"
       index        :  d
       initial data :  data { 1 .. 14 } ;

    PARAMETER:
       identifier   :  Elevation
       index domain :  i
       text         :  "elevation"
       initial data :  data { 2 : 150,  3 : 160,  4 : 155,  5 : 150,  6 : 165,  7 : 160 } ;

    PARAMETER:
       identifier   :  Demand
       index domain :  i
       text         :  "demand"
       initial data :  data { 2 : 0.027770,  3 : 0.027770,  4 : 0.033330,  5 : 0.075000,  6 : 0.091670,  7 : 0.055550 } ;

    PARAMETER:
       identifier   :  MinPressure
       index domain :  i
       text         :  "minimum pressure"
       initial data :  data { 1 : 210,  2 : 30,  3 : 30,  4 : 30,  5 : 30,  6 : 30,  7 : 30 } ;

    PARAMETER:
       identifier   :  MaxPressure
       index domain :  i
       text         :  "maximum pressure"
       initial data :  data { 1 : 210,  2 : 60,  3 : 50,  4 : 55,  5 : 60,  6 : 45,  7 : 50 } ;

    PARAMETER:
       identifier   :  PipeLength
       index domain :  (i,j)
       text         :  "pipe length" ;

    PARAMETER:
       identifier   :  MaxSpeed
       index domain :  (i,j)
       text         :  "pipe maximum speed" ;

    PARAMETER:
       identifier   :  MinPipeDiameter
       text         :  "minimal pipe diameter" ;

    PARAMETER:
       identifier   :  MaxPipeDiameter
       text         :  "maximal pipe diameter" ;

    PARAMETER:
       identifier   :  ResistanceCoefficient
       index domain :  (i,j)
       text         :  "coefficient of resistance" ;

    PARAMETER:
       identifier   :  Diameter
       index domain :  (i,j,d)
       text         :  "discrete diameters"
       definition   :  DiscreteDiameter(d) ;

    PARAMETER:
       identifier   :  DiscreteCost
       index domain :  d
       text         :  "discrete costs"
       initial data :  data { 1 : 2,  2 : 5,  3 : 8,  4 : 11,  5 : 16,  6 : 23,  7 : 32,  8 : 50,  9 : 60,  10 : 90,  11 : 130,  12 : 170,  13 : 300,  14 : 550 } ;

    PARAMETER:
       identifier   :  PI
       text         :  "Famous constant"
       definition   :  4*arctan(1) ;

    PARAMETER:
       identifier   :  DeltaNeighborhood
       text         :  "delta so that we smooth the flow in a delta neighborhood of 0"
       initial data :  0.00005 ;

    PARAMETER:
       identifier   :  Power
       text         :  "power in pressure loss equation"
       initial data :  1.852 ;

    PARAMETER:
       identifier   :  DiscreteDiameter
       index domain :  d
       initial data :  data
                           { 1  : 0.025400,  2  : 0.050800,  3  : 0.076200,  4  : 0.101600,  5  : 0.152400,  6  : 0.203200,  7  : 0.254000,
                             8  : 0.304800,  9  : 0.355600,  10 : 0.406400,  11 : 0.457200,  12 : 0.508000,  13 : 0.558800,  14 : 0.609600 } ;

    VARIABLE:
       identifier   :  HydraulicHead
       index domain :  i
       text         :  "Node's hydraulic head" ;

    VARIABLE:
       identifier   :  Flow
       index domain :  (i,j)
       text         :  "Flow in pipe" ;

    VARIABLE:
       identifier   :  Area
       index domain :  (i,j)
       text         :  "Cross-sectional of pipe" ;

    VARIABLE:
       identifier   :  X
       index domain :  (i,j,d)
       text         :  "forcing diameter values to discrete values"
       range        :  binary ;

    VARIABLE:
       identifier   :  TotalCost
       text         :  "total discrete cost"
       definition   :  sum( (i,j) | Pipes(i,j), PipeLength(i,j) * sum(d, X(i,j,d)*DiscreteCost(d)) ) ;

    CONSTRAINT:
       identifier   :  Balance
       index domain :  i | not i in SourceNodes
       text         :  "Conservation of flow"
       definition   :  demand(i) = - sum( j | Pipes(i,j), Flow(i,j) ) + sum( j | Pipes(j,i), Flow(j,i) ) ;

    CONSTRAINT:
       identifier   :  HydraulicHeadFlow
       index domain :  (i,j) | Pipes(i,j)
       text         :  "Headloss relationship across each link in the network"
       definition   :  abs(Flow(i,j))**(Power-1)*Flow(i,j) = (4/PI*Area(i,j))**2.435 * ResistanceCoefficient(i,j)**Power * (HydraulicHead(i)-HydraulicHead(j)) / (10.7*PipeLength(i,j)) ;

    CONSTRAINT:
       identifier   :  PipeFlowUpperBound
       index domain :  (i,j) | Pipes(i,j)
       text         :  "Upper bound on pipe's flow (expressed as a function of the maximum velocity and of the diameter)"
       definition   :  Flow(i,j) <= Area(i,j) * MaxSpeed(i,j) ;

    CONSTRAINT:
       identifier   :  PipeFlowLowerBound
       index domain :  (i,j) | Pipes(i,j)
       text         :  "Lower bound on pipe's flow (expressed as a function of the maximum velocity and of the diameter)"
       definition   :  Flow(i,j) >= - Area(i,j) * MaxSpeed(i,j) ;

    CONSTRAINT:
       identifier   :  Linking
       index domain :  (i,j) | Pipes(i,j)
       text         :  "Linking continuous diameter variables to the discrete choices"
       definition   :  Area(i,j) = PI/4 * sum( d, sqr(Diameter(i,j,d)) * X(i,j,d) ) ;

    CONSTRAINT:
       identifier   :  Convexity
       index domain :  (i,j) | Pipes(i,j)
       text         :  "SOS convexity constraints"
       definition   :  sum( d, X(i,j,d) ) = 1 ;

    MATHEMATICAL PROGRAM:
       identifier   :  water
       objective    :  TotalCost
       direction    :  minimize
       type         :  MINLP ;

    ELEMENT PARAMETER:
       identifier   :  myGMP
       range        :  AllGeneratedMathematicalPrograms ;

  ENDSECTION  ;

  PROCEDURE
    identifier :  MainInitialization
    body       :  
      PipeLength(i,j) := 1000;
      ResistanceCoefficient(i,j) := 130;
      MaxSpeed(i,j) := 2.0;
      
      MinPipeDiameter := smin((i,j,d), Diameter(i,j,d));
      MaxPipeDiameter := smax((i,j,d), Diameter(i,j,d));
      
      HydraulicHead.lo(i) := MinPressure(i)+Elevation(i);
      HydraulicHead.up(i) := MaxPressure(i)+Elevation(i);
      
      Area.lo(i,j) | Pipes(i,j) := (PI/4)*sqr(MinPipeDiameter);
      Area.up(i,j) | Pipes(i,j) := (PI/4)*sqr(MaxPipeDiameter);

  ENDPROCEDURE  ;

  PROCEDURE
    identifier :  MainExecution
    body       :  
      ShowProgressWindow;
      
      myGMP := GMP::Instance::Generate( water );
      
      BB( myGMP );

  ENDPROCEDURE  ;

  PROCEDURE
    identifier :  MainTermination
    body       :  
      return 1;

  ENDPROCEDURE  ;

  SECTION Section_BB
      source file :  "BB.aim"
    comment     :  "This section implements a generic Branch-and-Bound algorithm for MIP and MINLP
                    minimization problems containing binary variables (and not general integer
                    variables).
                    
                    The algorithm is written using the AIMMS language and uses GMP functionality.
                    The Branch-and-Bound algorithm starts with a presolve step. Nodes are selected
                    by taking the node with the best objective. Branching variables are selected
                    by taking the variable with the most fractional value.
                    
                    References:
                    Nemhauser, G.L. and L.A. Wolsey, Integer and Combinatorial Optimization, Wiley,
                    1999."


  ENDSECTION Section_BB ;

ENDMODEL Water_Distribution ;
