
MAIN MODEL Main_SingleSmallBucket2
  comment :  "Lot sizing
              
              Problem type:
              MIP (small)
              
              Description:
              Lot-sizing problems are production planning problems in which the periods
              are a priori, and production of an item in a given period implies some
              discrete event such as payment of a cost or the loss of a amount of
              production capacity, due to placement of an order, or the set-up, startup,
              or changeover of a machine.
              
              References:
              Problem vpm5 from: Belvaux, G., L.A. Wolsey, Lotsizelib: A library of models
              and matrices for lot-sizing problems, Core discussion paper, Universite
              Catholique de Louvain, 1999."

  DECLARATION SECTION 

    PARAMETER:
       identifier   :  NumberOfItems
       definition   :  8 ;

    PARAMETER:
       identifier   :  NumberOfMachines
       definition   :  4 ;

    PARAMETER:
       identifier   :  NumberOfPeriods
       definition   :  8 ;

    SET:
       identifier   :  Items
       subset of    :  Integers
       index        :  i
       definition   :  {1..NumberOfItems} ;

    SET:
       identifier   :  Machines
       subset of    :  Integers
       index        :  m
       definition   :  {1..NumberOfMachines} ;

    SET:
       identifier   :  Periods
       subset of    :  Integers
       index        :  t
       definition   :  {1..NumberOfPeriods} ;

    PARAMETER:
       identifier   :  InitialStock
       index domain :  (i)
       definition   :  data { 1 : 200,  2 : 400,  3 : 600,  4 : 500,  5 : 500,  6 : 400,  7 : 400,  8 : 400 } ;

    PARAMETER:
       identifier   :  MinStock
       index domain :  (i)
       definition   :  data { 1 : 100,  2 : 200,  3 : 300,  4 : 400,  5 : 200,  6 : 100,  7 : 300,  8 : 200 } ;

    PARAMETER:
       identifier   :  MaxStock
       index domain :  (i)
       definition   :  data { 1 : 300,  2 : 400,  3 : 400,  4 : 500,  5 : 500,  6 : 600,  7 : 400,  8 : 300 } ;

    PARAMETER:
       identifier   :  ProductionRate
       index domain :  (i,m) ;

    PARAMETER:
       identifier   :  MachineStartUpTime
       index domain :  (m)
       definition   :  data { 1 : 0.100,  2 : 0.200,  3 : 0.400,  4 : 0.500 } ;

    PARAMETER:
       identifier   :  StartUpTime
       index domain :  (i,m)
       definition   :  MachineStartUpTime(m) ;

    PARAMETER:
       identifier   :  Demand
       index domain :  (i,t) ;

    VARIABLE:
       identifier   :  X
       index domain :  (i,m,t)
       range        :  nonnegative
       comment      :  "Fraction produced of item i on machine m in period t" ;

    VARIABLE:
       identifier   :  Y
       index domain :  (i,m,t)
       range        :  binary
       comment      :  "Production variable: 1 if item i is produced on machine m in period t" ;

    VARIABLE:
       identifier   :  S
       index domain :  (i,t)
       range        :  nonnegative
       comment      :  "Stock of item i on period t" ;

    VARIABLE:
       identifier   :  Z
       index domain :  (i,t,m)
       range        :  binary
       comment      :  "Startup variable: 1 if production of item i is started on machine m in period t" ;

    VARIABLE:
       identifier   :  V
       index domain :  (i)
       range        :  nonnegative
       comment      :  "Excess over upper bound on stock for item i" ;

    VARIABLE:
       identifier   :  TimeLoss
       range        :  free
       definition   :  sum((i,m,t), StartUpTime(i,m) * Z(i, t, m)) + sum(i, 10 * V(i)) ;

    CONSTRAINT:
       identifier   :  FlowConstraint
       index domain :  (i,t) | t>1
       definition   :  S(i, t-1) + sum(m, ProductionRate(i, m) * X(i, m, t)) = Demand(i, t) + S(i, t) ;

    CONSTRAINT:
       identifier   :  FlowConstraintBis
       index domain :  (i)
       definition   :  InitialStock(i) + sum(m, ProductionRate(i, m) * X(i, m, 1)) = Demand(i, 1) + S(i, 1) ;

    CONSTRAINT:
       identifier   :  StartUpContraint
       index domain :  (i,m,t)
       definition   :  X(i, m, t) + StartUpTime(i,m) * Z(i, t, m) <= Y(i, m, t) ;

    CONSTRAINT:
       identifier   :  StartUpConstraint1
       index domain :  (i,m,t)
       definition   :  Z(i, t, m) >= Y(i, m, t) - Y(i, m, t-1) ;

    CONSTRAINT:
       identifier   :  StartUpConstraint2
       index domain :  (i,t,m)
       definition   :  Z(i, t, m) + Z(i, t-1, m) <= Y(i, m, t) ;

    CONSTRAINT:
       identifier   :  StartUpConstraint3
       index domain :  (m,t)
       definition   :  sum(i, Y(i, m, t) - Z(i, t, m)) <= 1 ;

    CONSTRAINT:
       identifier   :  UniqueStartUpConstraint
       index domain :  (m,t)
       definition   :  sum(i, Z(i, t, m)) <= 1 ;

    CONSTRAINT:
       identifier   :  StartUpTimeConstraint
       index domain :  (m,t)
       definition   :  sum(i, X(i, m, t)) + sum(i, StartUpTime(i, m) * Z(i, t, m)) <= 1 ;

    CONSTRAINT:
       identifier   :  MaxStockConstraint
       index domain :  (i,t)
       definition   :  S(i, t) <= MaxStock(i) + V(i) ;

    CONSTRAINT:
       identifier   :  MinStockConstraint
       index domain :  (i,t)
       definition   :  S(i, t) >= MinStock(i) ;

    MATHEMATICAL PROGRAM:
       identifier   :  LeastTime
       objective    :  TimeLoss
       direction    :  minimize
       constraints  :  AllConstraints
       variables    :  AllVariables
       type         :  Automatic ;

  ENDSECTION  ;

  PROCEDURE
    identifier :  MainInitialization
    body       :  
      Demand(i,t) := DATA TABLE
      
         1      2      3      4      5      6      7      8
      !
      1 400    300    300     0      0    600      0      0
      2   0    300    200   300    400      0      0      0
      3   0      0      0   500    600      0      0      0
      4   0      0      0     0    300    800      0      0
      5   0      0      0   500      0    100      0      0
      6   0      0      0     0      0      0    900    200
      7 700    200      0     0      0      0      0      0
      8   0    400    500     0      0      0      0      0
      ;
      
      
      ProductionRate(i,m) := DATA TABLE
      
          1       2       3       4
      !
      1  200     300     400     300
      2  400     200     100     400
      3  400     400     300     400
      4  300     400     200     300
      5  200     200     100     300
      6  300     200     400     500
      7  300     500     600     600
      8  500     500     400     600
      ;

  ENDPROCEDURE  ;

  PROCEDURE
    identifier :  MainExecution
    body       :  
      solve LeastTime;

  ENDPROCEDURE  ;

  PROCEDURE
    identifier :  MainTermination
    body       :  
      return 1;

  ENDPROCEDURE  ;

ENDMODEL Main_SingleSmallBucket2 ;
