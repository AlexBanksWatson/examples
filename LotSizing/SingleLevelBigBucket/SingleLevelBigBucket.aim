
MAIN MODEL Main_SingleLevelBigBucket

  DECLARATION SECTION 

    PARAMETER:
       identifier   :  NumberOfItems
       range        :  integer
       definition   :  8 ;

    PARAMETER:
       identifier   :  NumberOfPeriods
       range        :  integer
       definition   :  8 ;

    SET:
       identifier   :  Items
       subset of    :  Integers
       index        :  i
       definition   :  {1..NumberOfItems} ;

    SET:
       identifier   :  Periods
       subset of    :  Integers
       index        :  t
       definition   :  {1..NumberOfPeriods} ;

    PARAMETER:
       identifier   :  Demand
       index domain :  (i,t) ;

    PARAMETER:
       identifier   :  PeriodDemand
       index domain :  i
       definition   :  sum(t, Demand(i, t)) ;

    PARAMETER:
       identifier   :  TotalCapacity
       index domain :  t ;

    PARAMETER:
       identifier   :  Capacity
       index domain :  (i,t)
       definition   :  Min(PeriodDemand(i), TotalCapacity(t)) ;

    PARAMETER:
       identifier   :  CostF
       index domain :  i ;

    PARAMETER:
       identifier   :  CostH
       index domain :  i ;

    PARAMETER:
       identifier   :  CostB
       index domain :  i ;

    VARIABLE:
       identifier   :  X
       index domain :  (i,t)
       range        :  nonnegative ;

    VARIABLE:
       identifier   :  S
       index domain :  (i,t) | t <> NumberOfPeriods
       range        :  nonnegative ;

    VARIABLE:
       identifier   :  R
       index domain :  (i,t) | t <> NumberOfPeriods
       range        :  nonnegative ;

    VARIABLE:
       identifier   :  Y
       index domain :  (i,t)
       range        :  binary ;

    VARIABLE:
       identifier   :  TotalCost
       range        :  free
       definition   :  sum((i,t), CostH(i) * S(i, t) + CostB(i) * R(i, t) + CostF(i) * Y(i, t)) ;

    CONSTRAINT:
       identifier   :  FlowConstraint
       index domain :  (i,t)
       definition   :  S(i, t-1) - R(i, t-1) + X(i, t) = Demand(i, t) + S(i, t) - R(i, t) ;

    CONSTRAINT:
       identifier   :  CapacityConstraint
       index domain :  (i,t)
       definition   :  X(i, t) <= Capacity(i,t) * Y(i, t) ;

    CONSTRAINT:
       identifier   :  TotalCapacityConstraint
       index domain :  t
       definition   :  sum(i, X(i, t)) <= TotalCapacity(t) ;

    MATHEMATICAL PROGRAM:
       identifier   :  LeastCost
       objective    :  TotalCost
       direction    :  minimize
       constraints  :  AllConstraints
       variables    :  AllVariables
       type         :  Automatic ;

  ENDSECTION  ;

  PROCEDURE
    identifier :  MainInitialization
    body       :  
      COMPOSITE TABLE
      
         i     t     Demand
      !  -     -     ------
         1     1       0
         1     2       70
         1     3       50
         1     4       100
         1     5       20
         1     6       80
         1     7       0
         1     8       100
         2     1       20
         2     2       40
         2     3       50
         2     4       10
         2     5       30
         2     6       0
         2     7       40
         2     8       50
         3     1       40
         3     2       50
         3     3       0
         3     4       100
         3     5       40
         3     6       80
         3     7       90
         3     8       160
         4     1       0
         4     2       100
         4     3       100
         4     4       150
         4     5       160
         4     6       90
         4     7       100
         4     8       100
         5     1       50
         5     2       0
         5     3       20
         5     4       40
         5     5       10
         5     6       10
         5     7       20
         5     8       10
         6     1       70
         6     2       40
         6     3       40
         6     4       40
         6     5       100
         6     6       20
         6     7       40
         6     8       50
         7     1       0
         7     2       20
         7     3       50
         7     4       10
         7     5       20
         7     6       60
         7     7       40
         7     8       40
         8     1       10
         8     2       20
         8     3       0
         8     4       0
         8     5       10
         8     6       10
         8     7       20
         8     8       30  ;
      
         COMPOSITE TABLE
      
        t     TotalCapacity
       !-     -------------
        1         350
        2         350
        3         350
        4         400
        5         400
        6         400
        7         400
        8         500    ;
      
         COMPOSITE TABLE
      
        i     CostH
       !-     -----
        1       1
        2       1
        3       1
        4       1
        5       1
        6       1
        7       1
        8       1    ;
      
          COMPOSITE TABLE
      
        i     CostB
       !-     -----
        1       2
        2       2
        3       2
        4       2
        5       2
        6       2
        7       2
        8       2    ;
      
      
          COMPOSITE TABLE
      
        i     CostF
       !-     -----
        1      100
        2      200
        3      200
        4      300
        5      400
        6      250
        7      500
        8      300    ;

  ENDPROCEDURE  ;

  PROCEDURE
    identifier :  MainExecution
    body       :  
      solve LeastCost;

  ENDPROCEDURE  ;

  PROCEDURE
    identifier :  MainTermination
    body       :  
      return DataManagementExit();

  ENDPROCEDURE  ;

ENDMODEL Main_SingleLevelBigBucket ;
